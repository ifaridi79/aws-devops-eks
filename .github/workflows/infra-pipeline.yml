name: Infrastructure Pipeline


on:
  push:
    branches: [ "main" ]
      
jobs:
  infrastructure:
    name: 'Provisioning EKS'
    runs-on: ubuntu-latest   
    
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}       
        
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: tf-init
      run: terraform -chdir="./codebase/infrastructure/" init -input=false      

    # Validate terraform files
    - name: Terraform Validate
      id: tf-validate
      run: terraform -chdir="./codebase/infrastructure/" validate -no-color    
    
    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: tf-format
      run: terraform -chdir="./codebase/infrastructure/" fmt -check -recursive
      continue-on-error: true
    
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: tf-plan
      run: terraform -chdir="./codebase/infrastructure/" plan -input=false
    
    # Apply the execution to create resources
    - name: Terraform Apply
      id: tf-apply     
      run: terraform -chdir="./codebase/infrastructure/" apply -auto-approve -input=false
    
    