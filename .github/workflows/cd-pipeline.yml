name: CD Pipeline

on:
    pull_request:
        branches: [ "main" ]


env:
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository }}
    GH_REPOSITORY: aws-devops-eks
    TAG: latest
    VERSION: v1.10.1      
    NAMESPACE: production
    REGION: us-east-2

jobs:
  deploy:
    name: deploy to EKS
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.REGION }}

    # Login into Container GitHub Registry Package Manager  
    - name: Log in to the Container registry
      id: login-gh
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}    

    # Kubectl 
    - name: Create Namespace       
      uses: tale/kubectl-action@v1
      with:
        base64-kube-config: ${{ secrets.KUBE_CONFIG_DATA }}
        kubectl-version: v1.22.0       
    - run: kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -    

    - name: deployment
      uses: kodermax/kubectl-aws-eks@master
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        GH_REGISTRY: ${{ steps.login-gh.outputs.registry }}
        KUBECTL_VERSION: "v1.22.0"
      with:
        args: set image deployment/${{ env.GH_REPOSITORY }} ${{ env.GH_REPOSITORY }}=${{ env.GH_REGISTRY }}/${{ env.GH_REPOSITORY}}:${{ env.TAG }}     
        
    - name: verify deployment
      uses: kodermax/kubectl-aws-eks@master
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
      with:
        args: rollout status deployment/${{ env.GH_REPOSITORY }}       